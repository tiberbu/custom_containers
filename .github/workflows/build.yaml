name: Build Image

  
on:
  push:
    branches:
      - master

  repository_dispatch:

  workflow_dispatch:
    inputs:
      image:
        description: Image name
        type: string
      version:
        description: Image version tag
        type: string
      frappe-repo:
        description: Frappe repo
        type: string
      frappe-version:
        description: Frappe branch
        type: string
      py-version:
        description: Python version
        type: string
      nodejs-version:
        description: NodeJS version
        type: string
      apps-json-base64:
        description: base64 encoded string of apps.json
        type: string
      context:
        description: kaniko context
        type: string
      dockerfile:
        description: dockerfile path from context
        type: string
      registry-user:
        description: user name
        required: false

    secrets:
      REGISTRY_PASSWORD:
        description: registry password
        required: false
    
  workflow_call:
    inputs:
      repo:
        required: true
        type: string
        description: "'erpnext' or 'frappe'"
      version:
        required: true
        type: string
        description: "Major version, git tags should match 'v{version}.*'; or 'develop'"
      push:
        required: true
        type: boolean
      python_version:
        required: true
        type: string
        description: Python Version
      node_version:
        required: true
        type: string
        description: NodeJS Version
    

env:
  TOKEN: ${{ secrets.TOKEN }}
  IMAGE_NAME: ${{ inputs.image }}
  IMAGE_VERSION: ${{ inputs.version }}

jobs:
  build:
    runs-on: ubuntu-latest #tiberbu2 #ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Clean Git Cache
        run: git clean -ffdx && git reset --hard
        
      ## The default disk size of these runners is ~14GB, this is not enough to run the e2e tests.
      ## Cleanup the disk, see upstream discussion https://github.com/actions/runner-images/issues/2840.
      #- name: Cleanup Disk Space
      #  run: |
      #    echo "Before removing files:"
      #    df -h
      #    sudo rm -rf /usr/share/dotnet
      #    sudo rm -rf /opt/ghc
      #    sudo rm -rf "/usr/local/share/boost"
      #    sudo rm -rf "$AGENT_TOOLSDIRECTORY"
      #    echo "After removing files:"
        
      - name: Run Python Script to Update JSON
        env:
          TOKEN: ${{ secrets.TOKEN }}
        run: |
          python ci/script.py

      - name: Source Build Env
        id: source-build-env
        run: |
          cat ./ci/build.env >> $GITHUB_ENV
          echo "VERSION=$(cat ./ci/version.txt)" >> $GITHUB_ENV
          echo "APPS_JSON_BASE64=$(base64 -w 0 ./ci/apps.json)" >> $GITHUB_ENV
      
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITAL_OCEAN_KEY }}

      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 2400
      
      - name: Build and push Docker image with Kaniko
        uses: int128/kaniko-action@v1
        with:
          push: true
          cache: false
          kaniko-args: |
            --build-arg=FRAPPE_PATH=${{ inputs.frappe-repo || env.FRAPPE_REPO }}
            --build-arg=FRAPPE_BRANCH=${{ inputs.frappe-version || env.FRAPPE_VERSION }}
            --build-arg=PYTHON_VERSION=${{ inputs.py-version || env.PY_VERSION }}
            --build-arg=NODE_VERSION=${{ inputs.nodejs-version || env.NODEJS_VERSION }}
            --build-arg=APPS_JSON_BASE64=${{ inputs.apps-json-base64 || env.APPS_JSON_BASE64 }}
            --context=${{ inputs.context || env.CONTEXT }}
            --destination=registry.digitalocean.com/lonius/${{ env.IMAGE_NAME }}:${{ env.IMAGE_VERSION }}
            --dockerfile=${{ inputs.dockerfile || env.DOCKERFILE }}
      
      - name: Trivy Image Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'registry.digitalocean.com/lonius/${{ env.IMAGE_NAME }}:${{ env.IMAGE_VERSION }}'
          # scan-type: fs
          format: 'table'
          exit-code: 1
          ignore-unfixed: true
          severity: HIGH,CRITICAL
        continue-on-error: true

      - name: Inspector Scan
        id: inspector
        uses: aws-actions/vulnerability-scan-github-action-for-amazon-inspector@v1
        with:
           # change artifact_type to either 'repository', 'container', 'binary', or 'archive'.
           artifact_type: 'container'
  
           # change artifact_path to the file path or container image you would like to scan.
           # File paths should be relative to your root project directory.
           # For containers, this action accepts 'docker pull'-style references to containers,
           # such as 'alpine:latest' or a file path to an image exported as TAR using docker save.
           artifact_path: 'registry.digitalocean.com/lonius/${{ env.IMAGE_NAME }}:${{ env.IMAGE_VERSION }}'
           # artifact_path: './'
  
           # If enabled, this setting will display Inspector's vulnerability scan findings
           # as a GitHub actions step summary. See here for an example step summary:
           # https://github.com/aws-actions/vulnerability-scan-github-action-for-amazon-inspector/actions/runs/8800085041
           display_vulnerability_findings: "enabled"
  
           # Set vulnerability thresholds; if the number of vulnerabilities is
           # equal to or greater than any of the specified thresholds, this
           # action will set the 'vulnerability_threshold_exceeded'
           # output flag to 1.
           critical_threshold: 1
           high_threshold: 1
           medium_threshold: 0
           low_threshold: 0
           other_threshold: 0

           # Additional input arguments are available to control scan behavior.
           # See 'action.yml' for additional input/output options.


       # The following steps illustrate how to
       # display scan results in the GitHub Actions job terminal.
      - name: Display CycloneDX SBOM (JSON)
        run: cat ${{ steps.inspector.outputs.artifact_sbom }}
  
      - name: Display Inspector vulnerability scan results (JSON)
        run: cat ${{ steps.inspector.outputs.inspector_scan_results }}
  
      - name: Display Inspector vulnerability scan results (CSV)
        run: cat ${{ steps.inspector.outputs.inspector_scan_results_csv }}
  
      - name: Display Inspector vulnerability scan results (Markdown)
        run: cat ${{ steps.inspector.outputs.inspector_scan_results_markdown }}
  
  
       # The following steps illustrate how to
       # upload scan results as a GitHub actions job artifact
      - name: Upload Scan Results
        uses: actions/upload-artifact@v4
        with:
           name: Inspector Vulnerability Scan Artifacts
           path: |
             ${{ steps.inspector.outputs.inspector_scan_results }}
             ${{ steps.inspector.outputs.inspector_scan_results_csv }}
             ${{ steps.inspector.outputs.artifact_sbom }}
             ${{ steps.inspector.outputs.inspector_scan_results_markdown }}
  
  
         # This step illustrates how to add custom logic if
         # the vulnerability threshold is exceeded. This example
         # simply prints the 'vulnerability_threshold_exceeded' value
         # to the GitHub actions job terminal.
         # Replace 'echo' with 'exit' if you want to fail the job.
      - name: On vulnerability threshold exceeded
        run: echo ${{ steps.inspector.outputs.vulnerability_threshold_exceeded }}
      
      
      # Remove old image1 tags and images, keeping the latest 3
      - name: Clean up old image1 tags and images
        env:
          REPOSITORY: ${{ env.IMAGE_NAME }}
          REGISTRY: registry.digitalocean.com/lonius
          MIN_TO_KEEP: 10
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          # List tags for image1, sort by updated_at (newest first), and get the latest 3
          tags=$(doctl registry repository list-tags $REPOSITORY --output json | \
                 jq -r '.[] | .tag + "," + .updated_at' | \
                 sort -t, -k2 -r | \
                 head -n $MIN_TO_KEEP | \
                 cut -d, -f1)
          # Get all tags for image1
          all_tags=$(doctl registry repository list-tags $REPOSITORY --output json | jq -r '.[] | .tag')
          # Identify tags to delete
          tags_to_delete=""
          for tag in $all_tags; do
            if ! echo "$tags" | grep -Fx "$tag" > /dev/null; then
              tags_to_delete="$tags_to_delete $tag"
            fi
          done
          # Delete old tags if any
          if [ -n "$tags_to_delete" ]; then
            echo "Deleting tags: $tags_to_delete"
            doctl registry repository delete-tag $REPOSITORY $tags_to_delete --force
          else
            echo "No tags to delete."
          fi
          # Run garbage collection to delete unreferenced layers
          doctl registry garbage-collection start --include-untagged-manifests --force
      
