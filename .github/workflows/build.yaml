name: Build Image

on:
  push:
    branches:
      - master
  repository_dispatch:
  workflow_dispatch:
    inputs:
      image:
        description: Image name
        type: string
      version:
        description: Image version tag
        type: string
      frappe-repo:
        description: Frappe repo
        type: string
      frappe-version:
        description: Frappe branch
        type: string
      py-version:
        description: Python version
        type: string
      nodejs-version:
        description: NodeJS version
        type: string
      apps-json-base64:
        description: base64 encoded string of apps.json
        type: string
      context:
        description: docker build context (ignored; we use local checkout of frappe_docker)
        required: false
        type: string
      dockerfile:
        description: dockerfile path (ignored; we use frappe_docker/images/custom/Containerfile)
        required: false
        type: string
      registry-user:
        description: user name
        required: false
        type: string

env:
  TOKEN: ${{ secrets.TOKEN }}
  IMAGE_NAME: ${{ inputs.image }}
  IMAGE_VERSION: ${{ inputs.version }}
  AWS_REGION: me-central-1
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.me-central-1.amazonaws.com

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      # 1Ô∏è‚É£ Checkout this repo (workflow + ci scripts)
      - name: Checkout (workflow repo)
        uses: actions/checkout@v4

      - name: Clean Git Cache
        run: git clean -ffdx && git reset --hard

      # 2Ô∏è‚É£ Update JSON config
      - name: Run Python Script to Update JSON
        env:
          TOKEN: ${{ secrets.TOKEN }}
        run: python ci/script.py

      # 3Ô∏è‚É£ Source local env (optional)
      - name: Source Build Env
        run: |
          [ -f ./ci/build.env ] && cat ./ci/build.env >> $GITHUB_ENV
          [ -f ./ci/version.txt ] && echo "VERSION=$(cat ./ci/version.txt)" >> $GITHUB_ENV
          [ -f ./ci/apps.json ] && echo "APPS_JSON_BASE64=$(base64 -w 0 ./ci/apps.json)" >> $GITHUB_ENV

      # 4Ô∏è‚É£ Configure AWS credentials (verified)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # 5Ô∏è‚É£ Ensure ECR repo exists
      - name: Ensure ECR repository exists
        run: |
          set -e
          if ! aws ecr describe-repositories --repository-names "$IMAGE_NAME" --region "$AWS_REGION" >/dev/null 2>&1; then
            aws ecr create-repository \
              --repository-name "$IMAGE_NAME" \
              --region "$AWS_REGION" \
              --image-scanning-configuration scanOnPush=true \
              --encryption-configuration encryptionType=AES256
            echo "Created ECR repository: $IMAGE_NAME"
          else
            echo "ECR repository already exists: $IMAGE_NAME"
          fi

      # 6Ô∏è‚É£ Login to ECR
      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region "$AWS_REGION" \
            | docker login --username AWS --password-stdin "$ECR_REGISTRY"

      # 7Ô∏è‚É£ Pull frappe_docker as build context
      - name: Checkout frappe_docker (build context)
        uses: actions/checkout@v4
        with:
          repository: frappe/frappe_docker
          ref: main
          path: frappe_docker

      # 8Ô∏è‚É£ Set up Buildx (built-in Docker driver ‚Äî verified)
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Verify Buildx
        run: docker buildx ls

      # 9Ô∏è‚É£ Build & Push (with safe defaults + verbose output)
      - name: Build and push Docker image to ECR
        uses: docker/build-push-action@v6
        with:
          context: ./frappe_docker
          file: ./frappe_docker/images/custom/Containerfile
          push: true
          provenance: false
          sbom: false
          tags: |
            ${{ env.ECR_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_VERSION }}
          build-args: |
            FRAPPE_PATH=${{ inputs.frappe-repo || env.FRAPPE_REPO }}
            FRAPPE_BRANCH=${{ inputs.frappe-version || env.FRAPPE_VERSION }}
            PYTHON_VERSION=${{ inputs.py-version || env.PY_VERSION }}
            NODE_VERSION=${{ inputs.nodejs-version || env.NODEJS_VERSION }}
            APPS_JSON_BASE64=${{ inputs.apps-json-base64 || env.APPS_JSON_BASE64 }}
        env:
          DOCKER_BUILDKIT: 1
          BUILDKIT_PROGRESS: plain

      # üîü Optional: Print debug info if build fails
      - name: Print Docker logs (on failure)
        if: failure()
        run: |
          echo "==== Buildx Debug ===="
          docker buildx du
          docker system df -v
