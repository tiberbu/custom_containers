name: Build Image

on:
  push:
    branches:
      - master
  repository_dispatch:
  workflow_dispatch:
    inputs:
      image:
        description: Image name
        required: true
        type: string
      version:
        description: Image version tag
        required: true
        type: string
      frappe-repo:
        description: Frappe repo
        required: false
        type: string
      frappe-version:
        description: Frappe branch
        required: false
        type: string
      py-version:
        description: Python version
        required: false
        type: string
      nodejs-version:
        description: NodeJS version
        required: false
        type: string
      apps-json-base64:
        description: base64 encoded string of apps.json
        required: false
        type: string
      context:
        description: build context (ignored; we use local checkout of frappe_docker)
        required: false
        type: string
      dockerfile:
        description: dockerfile path (ignored; we use frappe_docker/images/custom/Containerfile)
        required: false
        type: string

env:
  AWS_REGION: me-central-1
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.me-central-1.amazonaws.com
  IMAGE_NAME: ${{ inputs.image }}
  IMAGE_VERSION: ${{ inputs.version }}

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 90

    steps:
      - name: Checkout (workflow repo)
        uses: actions/checkout@v4

      - name: Clean Git Cache
        run: git clean -ffdx && git reset --hard

      - name: Run Python Script to Update JSON (if present)
        env:
          TOKEN: ${{ secrets.TOKEN }}
        run: |
          if [ -f ci/script.py ]; then
            python ci/script.py
          else
            echo "ci/script.py not found; skipping"
          fi

      - name: Source Build Env (optional)
        run: |
          [ -f ./ci/build.env ] && cat ./ci/build.env >> $GITHUB_ENV
          [ -f ./ci/version.txt ] && echo "VERSION=$(cat ./ci/version.txt)" >> $GITHUB_ENV
          if [ -f ./ci/apps.json ]; then
            echo "APPS_JSON_BASE64=$(base64 -w 0 ./ci/apps.json)" >> $GITHUB_ENV
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Ensure ECR repository exists
        run: |
          set -e
          if ! aws ecr describe-repositories --repository-names "$IMAGE_NAME" --region "$AWS_REGION" >/dev/null 2>&1; then
            aws ecr create-repository \
              --repository-name "$IMAGE_NAME" \
              --region "$AWS_REGION" \
              --image-scanning-configuration scanOnPush=true \
              --encryption-configuration encryptionType=AES256
            echo "Created ECR repository: $IMAGE_NAME"
          else
            echo "ECR repository already exists: $IMAGE_NAME"
          fi

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region "$AWS_REGION" \
            | docker login --username AWS --password-stdin "$ECR_REGISTRY"

      - name: Checkout frappe_docker (build context)
        uses: actions/checkout@v4
        with:
          repository: frappe/frappe_docker
          ref: main
          path: frappe_docker

      - name: Patch upstream Containerfile to install build deps & decode apps.json
        run: |
          CONTAINERFILE=frappe_docker/images/custom/Containerfile
          if [ ! -f "$CONTAINERFILE" ]; then
            echo "ERROR: $CONTAINERFILE not found"; ls -la frappe_docker || exit 1
          fi
          echo "Backing up original Containerfile to ${CONTAINERFILE}.bak"
          cp "$CONTAINERFILE" "${CONTAINERFILE}.bak"
          echo "Inserting dependency install & apps.json decode before bench init"
          # Insert ARG APPS_JSON_BASE64 and a RUN that installs system deps, pip, frappe-bench and decodes apps json
          # We insert the block immediately BEFORE the line that starts with "RUN export APP_INSTALL_ARGS"
          sed -i '/^RUN export APP_INSTALL_ARGS/i ARG APPS_JSON_BASE64\nRUN apt-get update && apt-get install -y --no-install-recommends git curl python3-pip python3-dev libffi-dev libssl-dev gcc g++ make wkhtmltopdf && pip install -U pip setuptools wheel frappe-bench && if [ -n "${APPS_JSON_BASE64}" ]; then echo "${APPS_JSON_BASE64}" | base64 -d > /opt/frappe/apps.json; fi && rm -rf /var/lib/apt/lists/*' "$CONTAINERFILE"
          echo "Patch complete. Showing context around insertion:"
          sed -n '1,160p' "$CONTAINERFILE" | sed -n '100,160p'

      - name: Set up Docker Buildx (default driver - uses runner Buildx/BuildKit)
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Verify Buildx
        run: docker buildx ls

      - name: Build and push Docker image to ECR
        uses: docker/build-push-action@v6
        env:
          DOCKER_BUILDKIT: 1
          BUILDKIT_PROGRESS: plain
        with:
          context: ./frappe_docker
          file: ./frappe_docker/images/custom/Containerfile
          push: true
          provenance: false
          sbom: false
          build-args: |
            FRAPPE_PATH=${{ inputs.frappe-repo || env.FRAPPE_PATH || 'https://github.com/frappe/frappe' }}
            FRAPPE_BRANCH=${{ inputs.frappe-version || env.FRAPPE_BRANCH || 'version-15' }}
            PYTHON_VERSION=${{ inputs.py-version || env.PYTHON_VERSION || '3.11' }}
            NODE_VERSION=${{ inputs.nodejs-version || env.NODE_VERSION || '18' }}
            APPS_JSON_BASE64=${{ inputs.apps-json-base64 || env.APPS_JSON_BASE64 || '' }}
          tags: |
            ${{ env.ECR_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_VERSION }}

      - name: Debug info (only on failure)
        if: failure()
        run: |
          echo "=== buildx ls ==="
          docker buildx ls || true
          echo "=== docker system df ==="
          docker system df || true
          echo "=== tail buildkit logs (if any) ==="
          docker buildx du --builder ${{ steps.buildx.outputs.name }} || true
